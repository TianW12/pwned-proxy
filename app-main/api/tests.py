from django.test import TestCase
from django.urls import reverse
from rest_framework.test import APIClient
from django.contrib.auth.models import Group
from .models import APIKey, Domain, hash_api_key
from pathlib import Path
import json
from unittest import mock


class EndpointAuthTests(TestCase):
    @classmethod
    def setUpTestData(cls):
        # Load seeded API keys from the JSON file generated by the admin action
        fixture_path = Path(__file__).resolve().parent / 'tests' / 'seeded_api_keys.json'
        with open(fixture_path) as fh:
            data = json.load(fh)

        cls.keys = {}
        for item in data:
            group, _ = Group.objects.get_or_create(name=item['group_name'])
            api_key = APIKey.objects.create(
                group=group,
                hashed_key=hash_api_key(item['raw_key'])
            )
            domains = []
            for domain_name in item['domains']:
                domain_obj, _ = Domain.objects.get_or_create(name=domain_name)
                domains.append(domain_obj)
            api_key.domains.set(domains)
            cls.keys[item['group_name']] = item['raw_key']

        cls.client = APIClient()

    def _mock_hibp(self, return_value=None):
        if return_value is None:
            return_value = {}
        response = mock.Mock()
        response.status_code = 200
        response.json.return_value = return_value
        return mock.patch('api.views.hibp_get', return_value=response)

    def test_breached_domain_requires_valid_key(self):
        url = reverse('breached-domain', args=['dtu.dk'])
        with self._mock_hibp({'domain': 'dtu.dk'}):
            # Valid DTU key works
            resp = self.client.get(url, HTTP_X_API_KEY=self.keys['Danmarks Tekniske Universitet'])
            self.assertEqual(resp.status_code, 200)
            self.assertEqual(resp.json(), {'domain': 'dtu.dk'})

            # KU key denied
            resp = self.client.get(url, HTTP_X_API_KEY=self.keys['K\u00f8benhavns Universitet'])
            self.assertEqual(resp.status_code, 403)

            # Missing key -> 401
            resp = self.client.get(url)
            self.assertEqual(resp.status_code, 401)

            # Invalid key -> 401
            resp = self.client.get(url, HTTP_X_API_KEY='BADKEY')
            self.assertEqual(resp.status_code, 403)

    def test_breached_account_domain_check(self):
        url = reverse('breached-account', args=['user@ku.dk'])
        with self._mock_hibp({'account': 'user@ku.dk'}):
            # Correct key
            resp = self.client.get(url, HTTP_X_API_KEY=self.keys['K\u00f8benhavns Universitet'])
            self.assertEqual(resp.status_code, 200)
            self.assertEqual(resp.json(), {'account': 'user@ku.dk'})

            # Wrong domain key
            resp = self.client.get(url, HTTP_X_API_KEY=self.keys['Danmarks Tekniske Universitet'])
            self.assertEqual(resp.status_code, 403)

            # Invalid key
            resp = self.client.get(url, HTTP_X_API_KEY='BADKEY')
            self.assertEqual(resp.status_code, 403)

            # Missing key
            resp = self.client.get(url)
            self.assertEqual(resp.status_code, 401)
