version: "3.9"

services:
  pwnedproxy_app:
    image: dtuait/pwned-proxy-app-main:python-3.13-bullseye-django-5.1.6-myversion-1.0.2
    container_name: pwnedproxy_app
    env_file: .env                    # ← your secret values
    restart: unless-stopped

    # ←–––––––– THE TWO LINES THAT MATTER ––––––––→
    working_dir: /usr/src/project/app-main        # cd into the folder that *has* manage.py
    command: |
      sh -c "
        /usr/src/venvs/app-main/bin/python manage.py migrate --noinput &&
        /usr/src/venvs/app-main/bin/python manage.py collectstatic --noinput &&
        /usr/src/venvs/app-main/bin/gunicorn \
            --workers 3 --bind 0.0.0.0:8000 \
            pwned_proxy.wsgi:application
      "
    # ⇠––––––––––––––––––––––––––––––––––––––––––––

    expose:
      - "8000"                                     # Traefik will reach this port
    depends_on:
      - db

    labels:
      - traefik.enable=true
      - traefik.http.routers.pwnedproxy.rule=Host(`api.haveibeenpwned.security.ait.dtu.dk`)
      - traefik.http.routers.pwnedproxy.entryPoints=websecure
      - traefik.http.routers.pwnedproxy.tls=true
      - traefik.http.routers.pwnedproxy.tls.certresolver=letsencrypt
      - traefik.http.services.pwnedproxy.loadbalancer.server.port=8000
      # Optional HTTP→HTTPS redirect
      - traefik.http.routers.pwnedproxy-insecure.rule=Host(`api.haveibeenpwned.security.ait.dtu.dk`)
      - traefik.http.routers.pwnedproxy-insecure.entryPoints=web
      - traefik.http.routers.pwnedproxy-insecure.middlewares=pwnedproxy-https-redirect
      - traefik.http.middlewares.pwnedproxy-https-redirect.redirectscheme.scheme=https

  db:
    image: postgres:14-alpine
    container_name: pwnedproxy_db
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_DB:       ${POSTGRES_DB}
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data      # persists the database
    # no ports:5432 → DB stays internal

volumes:
  postgres_data:
