version: '3'
services:
  pwnedproxy_app:
    image: dtuait/pwned-proxy-app-main:python-3.13-bullseye-django-5.1.6-myversion-1.0.2
    container_name: pwnedproxy_app
    env_file: .env                     # Load environment variables from .env
    restart: unless-stopped
    # No ports section: use Traefik for external access
    expose:
      - "8000"                        # Expose Gunicorn port internally (Traefik will use this)
    depends_on:
      - db
    volumes:
      - postgres_data:/var/lib/postgresql/data  # (If the app image needs persistent storage for any data; not typically needed for Django app itself)
    labels:
      - traefik.enable=true
      - traefik.http.routers.pwnedproxy.rule=Host(`YOUR_DOMAIN_HERE`)
      - traefik.http.routers.pwnedproxy.entryPoints=websecure
      - traefik.http.routers.pwnedproxy.tls=true
      - traefik.http.routers.pwnedproxy.tls.certresolver=letsencrypt
      - traefik.http.services.pwnedproxy.loadbalancer.server.port=8000
      # (Optional) Redirect HTTP to HTTPS:
      - traefik.http.routers.pwnedproxy-insecure.rule=Host(`YOUR_DOMAIN_HERE`)
      - traefik.http.routers.pwnedproxy-insecure.entryPoints=web
      - traefik.http.routers.pwnedproxy-insecure.middlewares=pwnedproxy-https-redirect
      - traefik.http.middlewares.pwnedproxy-https-redirect.redirectscheme.scheme=https
  db:
    image: postgres:14-alpine
    container_name: pwnedproxy_db
    restart: unless-stopped
    env_file: .env                     # Use .env for PostgreSQL credentials
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persist database data
    # No ports: do not expose 5432 publicly (only accessible within Docker network)
volumes:
  postgres_data:
